services:
  api:
    container_name: boldd
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    image: boldd:latest
    environment:
      DOCKER_ENV: "true"
      ENVIRONMENT: ${ENVIRONMENT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASS: ${DATABASE_PASS}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_SSLMODE: ${DATABASE_SSLMODE}
      REDIS_DB: ${REDIS_DB}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: ${REDIS_PORT}
      MAIL_HOST: ${MAIL_HOST},
      MAIL_PORT: ${MAIL_PORT},
      MAIL_FROM: ${MAIL_FROM},
      MAIL_USERNAME: ${MAIL_USERNAME},
      MAIL_PASSWORD: ${MAIL_PASSWORD},
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME},
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY},
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET},
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_CALLBACK_URI: ${GOOGLE_CALLBACK_URI}
      GRAFANA_USER: ${GRAFANA_USER},
      GRAFANA_PASSWORD: ${GRAFANA_PASSWORD}
    ports:
      - 8003:8003
    volumes:
      - ${HOME}/.config/boldd/config.yaml:/app/boldd/config.yaml:ro
    networks:
      - boldd_network
    depends_on:
      postgresdb:
        condition: service_healthy
      redis:
          condition: service_healthy
      # migrate:
      #   condition: service_completed_successfully
    develop:
      watch:
        - path: .
          action: rebuild

  postgresdb:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASS}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - :5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - boldd_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    command: ["redis-server"]

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.55.0
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - boldd_network

  grafana:
    container_name: grafana
    image: grafana/grafana:11.3.0
    volumes:
      - ./docker/grafana/grafana.yml:/etc/grafana/provisioning/datasources/datasource.yaml
      - grafana_data:/var/lib/grafana
    ports:
      - 3000:3000
    networks:
      - boldd_network
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}

  # migrate:
  #   image: migrate/migrate
  #   container_name: boldd_migrations
  #   volumes:
  #     - ./internal/infrastructure/persistence/migrations:/migrations:ro
  #   entrypoint: >
  #     sh -c "
  #     migrate -path /migrations -database postgres://${DATABASE_USER}:${DATABASE_PASS}@postgresdb:${DATABASE_PORT}/${DATABASE_NAME}?sslmode=${DATABASE_SSLMODE} force ${FORCE_VERSION:-1} || true;
  #     migrate -path /migrations -database postgres://${DATABASE_USER}:${DATABASE_PASS}@postgresdb:${DATABASE_PORT}/${DATABASE_NAME}?sslmode=${DATABASE_SSLMODE} up
  #     "
  #   depends_on:
  #     postgresdb:
  #       condition: service_healthy
  #   networks:
  #       - boldd_network

networks:
  boldd_network:
    driver: bridge

volumes:
  postgres_data: {}
  grafana_data: {}
  redis_data: {}