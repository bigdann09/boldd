definitions:
  attributes.CreateAttributeRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  attributes.UpdateAttributeRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  auth.AuthResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  auth.RegisterRequest:
    properties:
      email:
        type: string
      fullname:
        maxLength: 60
        minLength: 6
        type: string
      password:
        minLength: 6
        type: string
      phone_number:
        type: string
    required:
    - email
    - fullname
    - password
    - phone_number
    type: object
  auth.ResendEmailRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  auth.ResetPasswordRequest:
    properties:
      code:
        minLength: 6
        type: string
      email:
        type: string
      password:
        type: string
    required:
    - code
    - email
    - password
    type: object
  auth.VerifyEmailRequest:
    properties:
      code:
        minLength: 6
        type: string
      email:
        type: string
    required:
    - code
    - email
    type: object
  categories.CreateCategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  categories.UpdateCategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dtos.AttributeResponse:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  dtos.CategoryResponse:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  dtos.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  dtos.SubCategoryResponse:
    properties:
      category_id:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  dtos.UserResponse:
    properties:
      email:
        type: string
      email_verified:
        type: boolean
      fullname:
        type: string
      phone_number:
        type: string
      roles:
        items:
          type: string
        type: array
      uuid:
        type: string
    type: object
  products.Attribute:
    properties:
      attribute_id:
        type: string
      value:
        items:
          type: string
        type: array
    required:
    - attribute_id
    - value
    type: object
  products.AttributeCombination:
    properties:
      attribute_id:
        type: string
      name:
        type: string
      values:
        items:
          type: string
        type: array
    required:
    - attribute_id
    - name
    - values
    type: object
  products.CreateProductRequest:
    properties:
      description:
        minLength: 30
        type: string
      images:
        items:
          type: string
        type: array
      name:
        minLength: 10
        type: string
      price:
        type: number
      variants:
        items:
          $ref: '#/definitions/products.ProductVariant'
        type: array
    required:
    - description
    - images
    - name
    type: object
  products.GenerateCombinationRequest:
    properties:
      attributes:
        items:
          $ref: '#/definitions/products.AttributeCombination'
        type: array
    required:
    - attributes
    type: object
  products.ProductVariant:
    properties:
      attribute:
        items:
          $ref: '#/definitions/products.Attribute'
        type: array
      base_price:
        type: number
      images:
        items:
          type: string
        type: array
      price:
        type: number
      quantity:
        type: integer
    required:
    - attribute
    - images
    - price
    - quantity
    type: object
  products.VariantCombinationResponse:
    properties:
      combination:
        items:
          type: string
        type: array
    type: object
  profile.ChangePasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  subcategories.CreateSubCategoryRequest:
    properties:
      category_id:
        type: string
      name:
        type: string
    required:
    - category_id
    - name
    type: object
  subcategories.UpdateSubCategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  vendors.CreateVendorRequest:
    properties:
      business_address:
        type: string
      business_email:
        type: string
      business_phone:
        type: string
      description:
        maxLength: 500
        minLength: 20
        type: string
      name:
        maxLength: 100
        minLength: 6
        type: string
    required:
    - business_address
    - business_email
    - business_phone
    - description
    - name
    type: object
info:
  contact:
    email: dann.dev09@gmail.com
    name: Daniel Ibok
    url: https://bigdann.vercel.com
paths:
  /attributes:
    get:
      consumes:
      - application/json
      description: '"get all product attributes"'
      parameters:
      - description: page number
        in: query
        name: page
        type: integer
      - description: page data size
        in: query
        name: page_size
        type: integer
      - description: sort by
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"get all product attributes"'
      tags:
      - Attributes
    post:
      consumes:
      - application/json
      description: '"adds a new attribute to the database"'
      parameters:
      - description: Create attribute payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/attributes.CreateAttributeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: No Content
          schema:
            type: string
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"create a new attribute"'
      tags:
      - Attributes
  /attributes/{id}:
    delete:
      consumes:
      - application/json
      description: '"retrieve a single attribute from database"'
      parameters:
      - description: attribute id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"get a single attribute"'
      tags:
      - Attributes
    get:
      consumes:
      - application/json
      description: '"retrieve a single attribute from database"'
      parameters:
      - description: attribute id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: attribute
          schema:
            $ref: '#/definitions/dtos.AttributeResponse'
        "404":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"get a single attribute"'
      tags:
      - Attributes
    put:
      consumes:
      - application/json
      description: '"update a single attribute in the database"'
      parameters:
      - description: attribute id
        in: path
        name: id
        required: true
        type: string
      - description: attribute id
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/attributes.UpdateAttributeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"update a single attribute"'
      tags:
      - Attributes
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: '"forgot password request"'
      parameters:
      - description: forgot password email payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/auth.ResendEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"forgot password"'
      tags:
      - Auth
  /auth/google-login:
    get:
      consumes:
      - application/json
      description: '"Login via Google OAuth"'
      produces:
      - application/json
      responses:
        "400":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"Google OAuth Login"'
      tags:
      - Auth
  /auth/google-logout:
    get:
      consumes:
      - application/json
      description: '"Logout via Google OAuth"'
      produces:
      - application/json
      responses:
        "400":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: '"Google OAuth Logout"'
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: '"Login user"'
      parameters:
      - description: User Login details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: body
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"authorize a user"'
      tags:
      - Auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: '"Refresh user access token"'
      parameters:
      - description: User registration details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: body
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"refresh token"'
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: '"Registers a new user"'
      parameters:
      - description: User registration details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: body
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"register user"'
      tags:
      - Auth
  /auth/resend-confirmation-email:
    post:
      consumes:
      - application/json
      description: '"Resend confirmation email to user"'
      parameters:
      - description: resend confirmation email payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/auth.ResendEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"resend confirmation email"'
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: '"reset password request"'
      parameters:
      - description: forgot password email payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"reset password"'
      tags:
      - Auth
  /auth/verify-email:
    post:
      consumes:
      - application/json
      description: '"Verify a user email address"'
      parameters:
      - description: verify email payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/auth.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"verify user email"'
      tags:
      - Auth
  /categories:
    get:
      consumes:
      - application/json
      description: '"get all product categories"'
      parameters:
      - description: page number
        in: query
        name: page
        type: integer
      - description: page data size
        in: query
        name: page_size
        type: integer
      - description: sort by
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"get all categories"'
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: '"product categories"'
      parameters:
      - description: Create category payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/categories.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: No Content
          schema:
            type: string
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"product categories"'
      tags:
      - Categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: '"retrieve a single category from database"'
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"get a single category"'
      tags:
      - Categories
    get:
      consumes:
      - application/json
      description: '"retrieve a single category from database"'
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: category
          schema:
            $ref: '#/definitions/dtos.CategoryResponse'
        "404":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"get a single category"'
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: '"update a single category in the database"'
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: string
      - description: category id
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/categories.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"update a single category"'
      tags:
      - Categories
  /products:
    post:
      consumes:
      - application/json
      description: '"store a new product"'
      parameters:
      - description: product payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/products.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: No Content
          schema:
            type: string
        "404":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"store a product"'
      tags:
      - Products
  /products/generate-variant-combinations:
    post:
      consumes:
      - application/json
      description: '"generate variant attribute combinations for a product"'
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/products.GenerateCombinationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: combinations
          schema:
            items:
              items:
                $ref: '#/definitions/products.VariantCombinationResponse'
              type: array
            type: array
        "404":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"generate variant attribute combinations"'
      tags:
      - Products
  /profile:
    get:
      consumes:
      - application/json
      description: '"get user profile information"'
      produces:
      - application/json
      responses:
        "200":
          description: body
          schema:
            $ref: '#/definitions/dtos.UserResponse'
        "403":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: '"get user profile"'
      tags:
      - Profile
  /profile/change-password:
    post:
      consumes:
      - application/json
      description: '"change authenticated user password"'
      parameters:
      - description: Change password payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/profile.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "403":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: '"change user password"'
      tags:
      - Profile
  /subcategories:
    get:
      consumes:
      - application/json
      description: '"get all product subcategories"'
      parameters:
      - description: page number
        in: query
        name: page
        type: integer
      - description: page data size
        in: query
        name: page_size
        type: integer
      - description: sort by
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: body
          schema:
            type: object
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"get all subcategories"'
      tags:
      - Subcategories
    post:
      consumes:
      - application/json
      description: '"product subcategories"'
      parameters:
      - description: Create subcategory payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/subcategories.CreateSubCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: No Content
          schema:
            type: string
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"product subcategories"'
      tags:
      - Subcategories
  /subcategories/{id}:
    delete:
      consumes:
      - application/json
      description: '"retrieve a single subcategory from database"'
      parameters:
      - description: subcategory id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"get a single subcategory"'
      tags:
      - Subcategories
    get:
      consumes:
      - application/json
      description: '"retrieve a single subcategory from database"'
      parameters:
      - description: subcategory id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: category
          schema:
            $ref: '#/definitions/dtos.SubCategoryResponse'
        "404":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"get a single subcategory"'
      tags:
      - Subcategories
    put:
      consumes:
      - application/json
      description: '"update a single subcategory in the database"'
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: string
      - description: category id
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/subcategories.UpdateSubCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: '"update a single subcategory"'
      tags:
      - Subcategories
  /vendors:
    get:
      consumes:
      - application/json
      description: '"get all vendors"'
      parameters:
      - description: page number
        in: query
        name: page
        type: integer
      - description: page data size
        in: query
        name: page_size
        type: integer
      - description: sort by
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: '"get all vendors"'
      tags:
      - Vendors
    post:
      consumes:
      - application/json
      description: '"store vendors"'
      parameters:
      - description: Create vendor payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/vendors.CreateVendorRequest'
      produces:
      - application/json
      responses:
        "201":
          description: No Content
          schema:
            type: string
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: '"store vendors"'
      tags:
      - Vendors
  /vendors/{id}/upload/logo:
    put:
      consumes:
      - multipart/form-data
      description: '"Update vendor logo"'
      parameters:
      - description: Logo image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: No Content
          schema:
            type: string
        "500":
          description: body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: '"Update vendor logo"'
      tags:
      - Vendors
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
